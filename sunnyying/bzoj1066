#include<stdio.h>
#include<iostream>
#include<string.h>
#include<algorithm>
#include<queue>
#include<map>
using namespace std;
const int MAXN=1010000;//点数的最大值
const int MAXM=5000000;//边数的最大值
const int INF=0x3f3f3f3f;
struct Node
{
    int from,to,next;
    int cap;
}edge[MAXM];
int tol;
int head[MAXN];
int dep[MAXN];
int gap[MAXN];//gap[x]=y :说明残留网络中dep[i]==x的个数为y
int N;//n是总的点的个数，包括源点和汇点
void init()
{
    tol=0;
    memset(head,-1,sizeof(head));
}
void addedge(int u,int v,int w)
{
    edge[tol].from=u;
    edge[tol].to=v;
    edge[tol].cap=w;
    edge[tol].next=head[u];
    head[u]=tol++;
}
int que[MAXN];
void BFS(int start,int end)
{
    memset(dep,-1,sizeof(dep));
    memset(gap,0,sizeof(gap));
    gap[0]=1;
    int front,rear;
    front=rear=0;
    dep[end]=0;
    que[rear++]=end;
    while(front!=rear)
    {
        int u=que[front++];
        if(front==MAXN)front=0;
        for(int i=head[u];i!=-1;i=edge[i].next)
        {
            int v=edge[i].to;
            if(dep[v]!=-1)continue;
            que[rear++]=v;
            if(rear==MAXN)rear=0;
            dep[v]=dep[u]+1;
            ++gap[dep[v]];
        }
    }
}
int cur[MAXN];
int S[MAXN];
int SAP(int start,int end)
{
    int res=0;
    BFS(start,end);
    int top=0;
    memcpy(cur,head,sizeof(head));
    int u=start;
    int i;
    while(dep[start]<N)
    {
        if(u==end)
        {
            int temp=INF;
            int inser;
            for(i=0;i<top;i++)
               if(temp>edge[S[i]].cap)
               {
                   temp=edge[S[i]].cap;
                   inser=i;
               }
            for(i=0;i<top;i++)
            {
                edge[S[i]].cap-=temp;
                edge[S[i]^1].cap+=temp;
            }
            res+=temp;
            top=inser;
            u=edge[S[top]].from;
        }
        if(u!=end&&gap[dep[u]-1]==0)//出现断层，无增广路
          break;
        for(i=cur[u];i!=-1;i=edge[i].next)
           if(edge[i].cap!=0&&dep[u]==dep[edge[i].to]+1)
             break;
        if(i!=-1)
        {
            cur[u]=i;
            S[top++]=i;
            u=edge[i].to;
        }
        else
        {
            int min=N;
            for(i=head[u];i!=-1;i=edge[i].next)
            {
                if(edge[i].cap==0)continue;
                if(min>dep[edge[i].to])
                {
                    min=dep[edge[i].to];
                    cur[u]=i;
                }
            }
            --gap[dep[u]];
            dep[u]=min+1;
            ++gap[dep[u]];
            if(u!=start)u=edge[S[--top]].from;
        }
    }
    return res;
}
int n,m,k;
void add(int x,int y)
{
    if(x<k||y<k||n-x<=k||m-y<=k)
    {
        addedge(x*m+y+1+n*m,n*m*2+1,INF);
        addedge(n*m*2+1,x*m+y+1+n*m,0);
    }
    for(int i=0;i<n;i++)
        for(int j=0;j<m;j++)
    {
        if(i==x&&y==j) continue;
        if(k*k<(i-x)*(i-x)+(y-j)*(y-j)) continue;
        addedge(x*m+y+1+n*m,i*m+j+1,INF);
        addedge(i*m+j+1,x*m+y+1+n*m,0);
    }
}
int main()
{
    int start,end,ans=0;
    char c[100];
    scanf("%d%d%d",&n,&m,&k);
    init();
    start=0,end=n*m*2+1;
    N=n*m*2+2;
    for(int i=0;i<n;i++)
    {
        scanf("%s",c);
        for(int j=0;j<m;j++)
        {
            addedge(i*m+j+1,i*m+j+n*m+1,c[j]-'0');
            addedge(i*m+j+n*m+1,i*m+j+1,0);
            add(i,j);
        }
    }
    for(int i=0;i<n;i++)
    {
        scanf("%s",c);
        for(int j=0;j<m;j++)
        {
            if(c[j]=='.') continue;
            addedge(0,i*m+j+1,1);
            addedge(i*m+j+1,0,0);
            ans++;
        }
    }
    printf("%d\n",ans-SAP(start,end));
    return 0;
}
