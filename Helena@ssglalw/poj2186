#include <cstdio>
#include <vector>
#include <cstring>
using namespace std;
const int MAX_N = 10005;
const int MAX_M = 50005;

int n, m;
vector<int> G[MAX_N];
vector<int> rG[MAX_N];
vector<int> post;//后序遍历的顺序
int vis[MAX_N];
int belong[MAX_N];

void dfs(int u){
	vis[u] = 1;
	for(int i=0; i<G[u].size(); i++){
		int v = G[u][i];
		if(!vis[v]){
			dfs(v);
		}
	}
	post.push_back(u);
}

void rdfs(int u, int comp){
	vis[u] = 1;
	belong[u] = comp;
	for(int i=0; i<rG[u].size(); i++){
		int v = rG[u][i];
		if(!vis[v]) rdfs(v, comp);//同属一个scc，则边反向后仍可达
	}
}

int scc(){
	memset(vis, 0, sizeof(vis));
	post.clear();
	for(int i=1; i<=n; i++){
		if(!vis[i]) dfs(i);
	}

	memset(vis, 0, sizeof(vis));
	int comp = 1;//所属分量标号
	for(int i=post.size()-1; i >= 0; i--){
		if(!vis[post[i]]) rdfs(post[i], comp++);
	}
	return comp;//最后一个scc的编号
}

int main()
{
	freopen("2186.txt", "r", stdin);
	scanf("%d%d", &n, &m);
	for(int i=0; i<m; i++){
		int u, v;
		scanf("%d %d", &u, &v);
		G[u].push_back(v);
		rG[v].push_back(u);//反向边
	}
	int num = scc();
	int u = 1, ans = 0;
	for(int v = 1; v <= n; v++){
		if(belong[v] == num-1){//最后一个scc的元素
			u = v;
			ans++;
		}
	}
	//u所在的scc为候选
	memset(vis, 0, sizeof(vis));
	rdfs(u, 1);//从u出发看是否可达所有
	for(int i=1; i<=n; i++){
		if(!vis[i]){
			ans = 0;
			break;
		}
	}
	printf("%d\n", ans);
	return 0;
}
