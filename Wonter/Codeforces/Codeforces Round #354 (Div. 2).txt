//A. Nicholas and Permutation
#include <bits/stdc++.h>
using namespace std;

int arr[200];
int main()
{
    int n;
    scanf("%d", &n);
    for(int i = 1; i <= n; ++i)
        scanf("%d", &arr[i]);
    int maxp, minp;
    for(int i = 1; i <= n; ++i)
    {
        if(arr[i] == 1)
            minp = i;
        if(arr[i] == n)
            maxp = i;
    }
    int ans = 0;
    ans = max(ans, abs(maxp - minp));
    ans = max(ans, abs(minp - 1));
    ans = max(ans, abs(maxp - 1));
    ans = max(ans, abs(minp - n));
    ans = max(ans, abs(maxp - n));
    printf("%d\n", ans);
    return 0;
}

//B - Pyramid of Glasses  
#include <bits/stdc++.h>
using namespace std;

int c[20][20];
int main()
{
    int n, t;
    scanf("%d%d", &n, &t);
    int C = 1 << n;
    int cnt = 0;
    for(int i = 1; i <= t; ++i)
    {
        c[1][1] += C;
        for(int j = 1; j <= n; ++j)
        {
            for(int k = 1; k <= j; ++k)
            {
                if(c[j][k] > C)
                {
                    int t = c[j][k] - C;
                    c[j + 1][k] += t / 2;
                    c[j + 1][k + 1] += t / 2;
                    c[j][k] = C;
                }
            }
        }
    }
    for(int i = 1; i <= n; ++i)
        for(int j = 1; j <= i; ++j)
            if(c[i][j] >= C)
                ++cnt;
    printf("%d\n", cnt);
    return 0;
}

//C - Vasya and String  
#include <bits/stdc++.h>
using namespace std;

char str[100005];
int n, k;
bool check(int mid)
{
    int need = 1000000000;
    int a, b;
    a = b = 0;
    for(int i = 1; i <= mid; ++i)
    {
        if(!str[i])
            return false;
        if(str[i] == 'a')
            ++a;
        if(str[i] == 'b')
            ++b;
    }
    need = mid - max(a, b);
    for(int i = mid + 1; str[i]; ++i)
    {
        if(str[i - mid] == 'a')
            --a;
        if(str[i - mid] == 'b')
            --b;
        if(str[i] == 'a')
            ++a;
        if(str[i] == 'b')
            ++b;
        need = min(need, mid - max(a, b));
    }
    if(need <= k)
        return true;
    return false;
}
int main()
{
    scanf("%d%d", &n, &k);
    scanf("%s", str + 1);
    int left = 1, right = n;
    while(left < right)
    {
        int mid = left + ((right - left + 1) >> 1);
        if(check(mid))
            left = mid;
        else
            right = mid - 1;
    }
    printf("%d\n", left);
    return 0;
}

//D - Theseus and labyrinth  
#include <bits/stdc++.h>
using namespace std;

char str[1010][1010];
bool vis[1010][1010][4];
int step[1010][1010][4];
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
int xt, yt;
int xm, ym;
int n, m;
struct node
{
    int x, y, c;
    node(int a, int b, int t)
    {
        x = a;
        y = b;
        c = t;
    }
};
bool check(char s, char t, int c, int dir)
{
    /*bool go[3][3];
    for(int i = 0;i < 3;++i)
        for(int j = 0;j < 3;++j)
        go[i][j] = false;
    bool &u = go[0][1], &l = go[1][0], &r = go[1][2], &d = go[2][1];
    */
    bool l, r, u, d;
    bool L, R, U, D;
    l = r = u = d = false;
    L = R = U = D = false;
    if(t == '*')
        return false;
    if(c == 0)
    {
        if(s == '+')
            l = r = u = d = true;
        if(s == '-')
            l = r = true;
        if(s == '|')
            u = d = true;
        if(s == '^')
            u = true;
        if(s == '>')
            r = true;
        if(s == '<')
            l = true;
        if(s == 'v')
            d = true;
        if(s == 'L')
            r = u = d = true;
        if(s == 'R')
            l = u = d = true;
        if(s == 'U')
            l = r = d = true;
        if(s == 'D')
            l = r = u = true;

    }
    if(c == 1)
    {
        if(s == '+')
            l = r = u = d = true;
        if(s == '-')
            u = d = true;
        if(s == '|')
            l = r = true;
        if(s == '^')
            r = true;
        if(s == '>')
            d = true;
        if(s == '<')
            u = true;
        if(s == 'v')
            l = true;
        if(s == 'L')
            r = l = d = true;
        if(s == 'R')
            l = u = r = true;
        if(s == 'U')
            l = u = d = true;
        if(s == 'D')
            d = r = u = true;
    }
    if(c == 2)
    {
        if(s == '+')
            l = r = u = d = true;
        if(s == '-')
            l = r = true;
        if(s == '|')
            u = d = true;
        if(s == '^')
            d = true;
        if(s == '>')
            l = true;
        if(s == '<')
            r = true;
        if(s == 'v')
            u = true;
        if(s == 'L')
            l = u = d = true;
        if(s == 'R')
            r = u = d = true;
        if(s == 'U')
            l = r = u = true;
        if(s == 'D')
            l = r = d = true;
    }
    if(c == 3)
    {
        if(s == '+')
            l = r = u = d = true;
        if(s == '-')
            u = d = true;
        if(s == '|')
            r = l = true;
        if(s == '^')
            l = true;
        if(s == '>')
            u = true;
        if(s == '<')
            d = true;
        if(s == 'v')
            r = true;
        if(s == 'L')
            r = u = l = true;
        if(s == 'R')
            l = r = d = true;
        if(s == 'U')
            u = r = d = true;
        if(s == 'D')
            l = d = u = true;
    }
    if(c == 0)
    {
        if(t == '+')
            L = R = U = D = true;
        if(t == '-')
            L = R = true;
        if(t == '|')
            U = D = true;
        if(t == '^')
            U = true;
        if(t == '>')
            R = true;
        if(t == '<')
            L = true;
        if(t == 'v')
            D = true;
        if(t == 'L')
            R = U = D = true;
        if(t == 'R')
            L = U = D = true;
        if(t == 'U')
            L = R = D = true;
        if(t == 'D')
            L = R = U = true;

    }
    if(c == 1)
    {
        if(t == '+')
            L = R = U = D = true;
        if(t == '-')
            U = D = true;
        if(t == '|')
            L = R = true;
        if(t == '^')
            R = true;
        if(t == '>')
            D = true;
        if(t == '<')
            U = true;
        if(t == 'v')
            L = true;
        if(t == 'L')
            R = L = D = true;
        if(t == 'R')
            L = U = R = true;
        if(t == 'U')
            L = U = D = true;
        if(t == 'D')
            D = R = U = true;
    }
    if(c == 2)
    {
        if(t == '+')
            L = R = U = D = true;
        if(t == '-')
            L = R = true;
        if(t == '|')
            U = D = true;
        if(t == '^')
            D = true;
        if(t == '>')
            L = true;
        if(t == '<')
            R = true;
        if(t == 'v')
            U = true;
        if(t == 'L')
            L = U = D = true;
        if(t == 'R')
            R = U = D = true;
        if(t == 'U')
            L = R = U = true;
        if(t == 'D')
            L = R = D = true;
    }
    if(c == 3)
    {
        if(t == '+')
            L = R = U = D = true;
        if(t == '-')
            U = D = true;
        if(t == '|')
            R = L = true;
        if(t == '^')
            L = true;
        if(t == '>')
            U = true;
        if(t == '<')
            D = true;
        if(t == 'v')
            R = true;
        if(t == 'L')
            R = U = L = true;
        if(t == 'R')
            L = R = D = true;
        if(t == 'U')
            U = R = D = true;
        if(t == 'D')
            L = D = U = true;
    }
    //下，上，右，左
    if(dir == 0)
    {
        if(d && U)
            return true;
        return false;
    }
    if(dir == 1)
    {
        if(u && D)
            return true;
        return false;
    }
    if(dir == 2)
    {
        if(r && L)
            return true;
        return false;
    }
    if(dir == 3)
    {
        if(l && R)
            return true;
        return false;
    }
    return false;
}
int bfs()
{
    queue<node> que;
    que.push(node(xt, yt, 0));
    step[xt][yt][0] = 0;
    vis[xt][yt][0] = true;
    while(que.size())
    {
        node now = que.front();
        que.pop();
        if(now.x == xm && now.y == ym)
            return step[now.x][now.y][now.c];
        if(!vis[now.x][now.y][(now.c+1) % 4])
        {
            que.push(node(now.x, now.y, (now.c+1) % 4));
            vis[now.x][now.y][(now.c+1) % 4] = true;
            step[now.x][now.y][(now.c+1) % 4] = step[now.x][now.y][now.c] + 1;
        }
        for(int i = 0;i < 4;++i)
        {
            int nx = now.x + dx[i];
            int ny = now.y + dy[i];
            if(nx >= 1 && nx <= n && ny >= 1 && ny <= m && !vis[nx][ny][now.c] && check(str[now.x][now.y], str[nx][ny], now.c, i))
            {
                que.push(node(nx, ny, now.c));
                step[nx][ny][now.c] = step[now.x][now.y][now.c] + 1;
                vis[nx][ny][now.c] = true;
            }
        }
    }
    return -1;
}
int main()
{
    scanf("%d%d", &n, &m);
    for(int i = 1;i <= n;++i)
        scanf("%s", str[i] + 1);
    scanf("%d%d", &xt, &yt);
    scanf("%d%d", &xm, &ym);
    printf("%d\n", bfs());
    return 0;
}

//E. The Last Fight Between Human and AI
#include <bits/stdc++.h>
using namespace std;

int a[100500];
int mod1 = 1e9 + 7, mod2 = 1e9 - 7;
int main()
{
    int n, k;
    int now = 0;
    scanf("%d%d", &n, &k);
    for(int i = 0; i <= n; ++i)
    {
        char str[10];
        scanf("%s", str);
        if(str[0] == '?')
        {
            a[i] = 100000000;
            continue;
        }
        int t = 0;
        int flag;
        if(str[0] == '-')
            flag = -1;
        else
            flag = 1;
        for(int j = 0; str[j]; ++j)
        {
            if(isdigit(str[j]))
                t = t * 10 + str[j] - '0';
        }
        a[i] = t * flag;
        now = (now + 1) % 2;
    }
    if(k == 0)
    {
        if(a[0] > 100000)
        {
            if(now)
                puts("Yes");
            else
                puts("No");
        }
        else
        {
            if(a[0] == 0)
                puts("Yes");
            else
                puts("No");
        }
        return 0;
    }
    int sum1 = 0, sum2 = 0;
    int i;
    for(i = n; i >= 0; --i)
    {
        if(a[i] > 100000)
            break;
        sum1 = (sum1 * (k % mod1) % mod1 + a[i]) % mod1;
        sum2 = (sum2 * (k % mod2) % mod2 + a[i]) % mod2;
    }
    if(i >= 0)
    {
        int cnt = 0;
        for(i = n; i >= 0; --i)
            if(a[i] > 100000)
                ++cnt;
        if(cnt & 1)
        {
            if(now)
                puts("Yes");
            else
                puts("No");
        }
        else
        {
            if(now)
                puts("No");
            else
                puts("Yes");
        }
        return 0;
    }
    if(sum1 == 0 && sum2 == 0)
        puts("Yes");
    else
        puts("No");
    return 0;
}
